pipeline {
    agent none  // No default agent for the entire pipeline

    tools {
        git 'Default'  // Define the Git tool to use, matching the Jenkins Global Tool Configuration
    }

    stages {
        stage('Checkout') {
            agent any  // Use any agent to checkout code
            steps {
                echo 'Checking out the result application...'
                checkout scm  // Check out code from the configured Git repository
            }
        }

        stage('Build') {
            when {
                changeset "**/result/**"  // Trigger build only if there are changes in the result directory
            }
            agent {
                docker {
                    image 'node:18-slim'  // Use Node.js Docker image for building the application
                    args '-v $HOME/.npm:/root/.npm'  // Bind volume to persist npm cache
                }
            }
            steps {
                echo 'Building result application...'
                dir('result') {
                    sh 'npm install'  // Install dependencies
                }
            }
        }

        stage('Test') {
            when {
                changeset "**/result/**"  // Trigger tests only if there are changes in the result directory
            }
            agent {
                docker {
                    image 'node:18-slim'  // Use Node.js Docker image for running tests
                    args '-v $HOME/.npm:/root/.npm'
                }
            }
            steps {
                echo 'Running tests on result application...'
                dir('result') {
                    sh 'npm test'  // Run unit tests using npm
                }
            }
        }

        stage('Docker Build & Push') {
            agent any  // Use any agent to build and push Docker image
            when {
                changeset "**/result/**"  // Trigger Docker build only if there are changes in the result directory
                branch 'master'  // Ensure this stage runs only on the master branch
            }
            steps {
                echo 'Building Docker image for result application...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        def resultImage = docker.build("chrisanich/result:v${env.BUILD_ID}", "./result")
                        resultImage.push()  // Push image with build ID tag
                        resultImage.push("latest")  // Push image with the 'latest' tag
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Build and Docker packaging for result application is complete.'  // Final message after pipeline completion
        }
    }
}
